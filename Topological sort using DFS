//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
  
  void DFS(int node, vector<vector<int>>& adj,vector<bool>&visited, stack<int>&ans){
        
      visited[node]=1;
      
      for(int j : adj[node]){
          if(!visited[j]){
             DFS( j, adj , visited,ans);
          }
      }
      
      ans.push(node);
      
     
  }
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        // code here
     
        vector<vector<int>>adj(V);
          vector<bool>visited(V,0);
        stack<int>ans;
        
        
        for (int i=0;i<edges.size();i++){
             int u=edges[i][0];
             int v=edges[i][1];
           adj[u].push_back(v);
          
         
          }
          //for unvisited node
          for(int i=0;i<V;i++){
               if(!visited[i]){
              DFS(i,adj,visited,ans);
          }
        }
       vector<int>topOrder;
       
       while(!ans.empty()){
           topOrder.push_back(ans.top());
           ans.pop();
       }
        return topOrder;
    }
};


//{ Driver Code Starts.

int check(int V, vector<int> &res, vector<vector<int>> adj) {

    if (V != res.size())
        return 0;

    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v])
                return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int V, E;
        cin >> V >> E;

        int x = V;
        vector<vector<int>> adj(V);
        vector<vector<int>> edges;

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            edges.push_back({u, v});
        }

        Solution obj;
        vector<int> res = obj.topoSort(V, edges);
        bool ans = check(x, res, adj);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";
        cout << "~"
             << "\n";
    }

    return 0;
}
// } Driver Code Ends
