class Solution {
  public:

    bool CycleDetect(int node, int parent, vector<vector<int>>& adj, vector<bool>& visited) {
        visited[node] = 1;

        for (int i = 0; i < adj[node].size(); i++) {
            // case 1: skip the edge to parent
            if (parent == adj[node][i])
                continue;

            // case 2: already visited
            if (visited[adj[node][i]] == 1)
                return true;

            // case 3: recursive DFS
            if (CycleDetect(adj[node][i], node, adj, visited)) {
                return true;
            }
        }

        return false;
    }

    bool isCycle(int V, vector<vector<int>>& edges) {
        vector<bool> visited(V, 0);
        vector<vector<int>> adj(V);

        for (int i = 0; i < edges.size(); i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (CycleDetect(i, -1, adj, visited)) {
                    return true;
                }
            }
        }

        return false;
    }
};
