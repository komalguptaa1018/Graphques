class Solution {
  public:
    bool isPossible(int N, int P, vector<pair<int, int> >& prerequisites) {
        // Code here
        //n=no. of tasks
        //p=list of prerequisite pairs
        
  //create adjacency list 
vector<int>adj[N];
vector<int>indeg(N,0);

for(int i=0;i<P;i++){
adj[prerequisites[i].second].push_back(prerequisites[i].first);
indeg[prerequisites[i].first]++;

}

queue<int>q;

for(int j=0;j<N;j++){
    if (!indeg[j]){
        q.push(j);
    }
}

int count=0;
 
 while(!q.empty()){
     int node=q.front();
     q.pop();
   count++;
 //now looking for the neighboring nodes
 for (int i=0;i<adj[node].size();i++){
   indeg[adj[node][i]]--;
 
   if(!indeg[adj[node][i]]){
       q.push(adj[node][i]);
   }
    
 }
}
return count==N;

//if node == size then cycle not present and we can solve
//if size < node then we cant 
  
    }
};
